#!/bin/bash

# todo:: find
ES_CONFIG="${HOME}/.config/emulationstation/es_input.cfg"

if [[ ! -f $1 ]]; then
  echo "Usage: mapper.txt [gamecontrollerdb.txt]"
  exit -1
fi

CONTROLLER_DB=$1
if [[ ! -f "${CONTROLLER_DB}" ]]; then
  echo "File ${CONTROLLER_DB} does not exist."
  exit -1
fi

# query controllers mapped in emulationstation, ignore devices without a GUID
ES_QUERY="$(xmlstarlet sel -t -m "inputList/inputConfig[@deviceGUID!='']" -n -v "@deviceName" -o ";" -v "@deviceGUID" $ES_CONFIG)"
printf "\n# Custom Entries\n" >> "${CONTROLLER_DB}"

function map {
  TR_NAME=$1
  TYPE=$2
  ID=$3
  VALUE=$4

  map_x_result="${TR_NAME}:"
  if [[ ${TYPE} == "axis" ]]; then
    DIR=""
    (( $VALUE < 0 )) && DIR="-"
    map_x_result="${map_x_result}${DIR}a${ID}"
  elif [[ ${TYPE} == "button" ]]; then
    map_x_result="${map_x_result}b${ID}"
  elif [[ ${TYPE} == "hat" ]]; then
    map_x_result="${map_x_result}h${ID}.${VALUE}"
  else # key
    map_x_result=""
    echo "Controllers shouldn't map keys."
  fi
}

echo "## ES Dev Mapper ##"
while IFS=";" read -r NAME GUID; do
  echo "$NAME :: $GUID"
  # Ignore keyboards
  if [[ "${GUID}" == -1 ]]; then
    continue
  fi

  # Check if GUID exists in gamecontrollerdb.txt
  if [ -z "$(fgrep -- ${GUID} "${CONTROLLER_DB}")" ]; then
    # Query this specific GUID on the mappings
    MAPPING_CFG=$(xmlstarlet sel -t -m "//inputConfig[@deviceGUID = '${GUID}']/input" -n -v "@name" -o ";" -v "@type" -o ";" -v "@id" -o ";" -v "@value" $ES_CONFIG)

    # Translate mapping to gamecontrollerdb format
    MAPPING="${GUID},${NAME},"
    while IFS=";" read -r -e INPUT_NAME TYPE ID VALUE; do
      [[ ${INPUT_NAME} == "b" ]]                && map "a"             "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "a" ]]                && map "b"             "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "y" ]]                && map "x"             "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "x" ]]                && map "y"             "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "hotkeyenable" ]]     && map "guide"         "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "up" ]]               && map "dpup"          "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "down" ]]             && map "dpdown"        "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "left" ]]             && map "dpleft"        "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "right" ]]            && map "dpright"       "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "leftshoulder" ]]     && map "leftshoulder"  "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "leftthumb" ]]        && map "leftstick"     "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "lefttrigger" ]]      && map "lefttrigger"   "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "rightshoulder" ]]    && map "rightshoulder" "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "rightthumb" ]]       && map "rightstick"    "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "righttrigger" ]]     && map "righttrigger"  "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "select" ]]           && map "back"          "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "start" ]]            && map "start"         "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "leftanalogdown" ]]   && map "-lefty"        "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "leftanalogleft" ]]   && map "-leftx"        "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "leftanalogright" ]]  && map "+leftx"        "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "leftanalogup" ]]     && map "+lefty"        "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "rightanalogdown" ]]  && map "-righty"       "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "rightanalogleft" ]]  && map "-rightx"       "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "rightanalogright" ]] && map "+rightx"       "${TYPE}" "${ID}" "${VALUE}"
      [[ ${INPUT_NAME} == "rightanalogup" ]]    && map "+righty"       "${TYPE}" "${ID}" "${VALUE}"
      MAPPING="${MAPPING}${map_x_result},"
    done <<< ${MAPPING_CFG:1}

    echo "${MAPPING}platform:Linux," >> "${CONTROLLER_DB}"
    echo "${MAPPING}"
    echo ""
  else
    echo "Already mapped..."
  fi
done <<< ${ES_QUERY:1}
